package com.roy.model;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

public class LoginInfoExample {
    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database table login_info
     *
     * @mbg.generated
     */
    protected String orderByClause;

    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database table login_info
     *
     * @mbg.generated
     */
    protected boolean distinct;

    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database table login_info
     *
     * @mbg.generated
     */
    protected List<Criteria> oredCriteria;

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table login_info
     *
     * @mbg.generated
     */
    public LoginInfoExample() {
        oredCriteria = new ArrayList<Criteria>();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table login_info
     *
     * @mbg.generated
     */
    public void setOrderByClause(String orderByClause) {
        this.orderByClause = orderByClause;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table login_info
     *
     * @mbg.generated
     */
    public String getOrderByClause() {
        return orderByClause;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table login_info
     *
     * @mbg.generated
     */
    public void setDistinct(boolean distinct) {
        this.distinct = distinct;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table login_info
     *
     * @mbg.generated
     */
    public boolean isDistinct() {
        return distinct;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table login_info
     *
     * @mbg.generated
     */
    public List<Criteria> getOredCriteria() {
        return oredCriteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table login_info
     *
     * @mbg.generated
     */
    public void or(Criteria criteria) {
        oredCriteria.add(criteria);
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table login_info
     *
     * @mbg.generated
     */
    public Criteria or() {
        Criteria criteria = createCriteriaInternal();
        oredCriteria.add(criteria);
        return criteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table login_info
     *
     * @mbg.generated
     */
    public Criteria createCriteria() {
        Criteria criteria = createCriteriaInternal();
        if (oredCriteria.size() == 0) {
            oredCriteria.add(criteria);
        }
        return criteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table login_info
     *
     * @mbg.generated
     */
    protected Criteria createCriteriaInternal() {
        Criteria criteria = new Criteria();
        return criteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table login_info
     *
     * @mbg.generated
     */
    public void clear() {
        oredCriteria.clear();
        orderByClause = null;
        distinct = false;
    }

    /**
     * This class was generated by MyBatis Generator.
     * This class corresponds to the database table login_info
     *
     * @mbg.generated
     */
    protected abstract static class GeneratedCriteria {
        protected List<Criterion> criteria;

        protected GeneratedCriteria() {
            super();
            criteria = new ArrayList<Criterion>();
        }

        public boolean isValid() {
            return criteria.size() > 0;
        }

        public List<Criterion> getAllCriteria() {
            return criteria;
        }

        public List<Criterion> getCriteria() {
            return criteria;
        }

        protected void addCriterion(String condition) {
            if (condition == null) {
                throw new RuntimeException("Value for condition cannot be null");
            }
            criteria.add(new Criterion(condition));
        }

        protected void addCriterion(String condition, Object value, String property) {
            if (value == null) {
                throw new RuntimeException("Value for " + property + " cannot be null");
            }
            criteria.add(new Criterion(condition, value));
        }

        protected void addCriterion(String condition, Object value1, Object value2, String property) {
            if (value1 == null || value2 == null) {
                throw new RuntimeException("Between values for " + property + " cannot be null");
            }
            criteria.add(new Criterion(condition, value1, value2));
        }

        public Criteria andLidIsNull() {
            addCriterion("lid is null");
            return (Criteria) this;
        }

        public Criteria andLidIsNotNull() {
            addCriterion("lid is not null");
            return (Criteria) this;
        }

        public Criteria andLidEqualTo(Long value) {
            addCriterion("lid =", value, "lid");
            return (Criteria) this;
        }

        public Criteria andLidNotEqualTo(Long value) {
            addCriterion("lid <>", value, "lid");
            return (Criteria) this;
        }

        public Criteria andLidGreaterThan(Long value) {
            addCriterion("lid >", value, "lid");
            return (Criteria) this;
        }

        public Criteria andLidGreaterThanOrEqualTo(Long value) {
            addCriterion("lid >=", value, "lid");
            return (Criteria) this;
        }

        public Criteria andLidLessThan(Long value) {
            addCriterion("lid <", value, "lid");
            return (Criteria) this;
        }

        public Criteria andLidLessThanOrEqualTo(Long value) {
            addCriterion("lid <=", value, "lid");
            return (Criteria) this;
        }

        public Criteria andLidIn(List<Long> values) {
            addCriterion("lid in", values, "lid");
            return (Criteria) this;
        }

        public Criteria andLidNotIn(List<Long> values) {
            addCriterion("lid not in", values, "lid");
            return (Criteria) this;
        }

        public Criteria andLidBetween(Long value1, Long value2) {
            addCriterion("lid between", value1, value2, "lid");
            return (Criteria) this;
        }

        public Criteria andLidNotBetween(Long value1, Long value2) {
            addCriterion("lid not between", value1, value2, "lid");
            return (Criteria) this;
        }

        public Criteria andLipIsNull() {
            addCriterion("lip is null");
            return (Criteria) this;
        }

        public Criteria andLipIsNotNull() {
            addCriterion("lip is not null");
            return (Criteria) this;
        }

        public Criteria andLipEqualTo(String value) {
            addCriterion("lip =", value, "lip");
            return (Criteria) this;
        }

        public Criteria andLipNotEqualTo(String value) {
            addCriterion("lip <>", value, "lip");
            return (Criteria) this;
        }

        public Criteria andLipGreaterThan(String value) {
            addCriterion("lip >", value, "lip");
            return (Criteria) this;
        }

        public Criteria andLipGreaterThanOrEqualTo(String value) {
            addCriterion("lip >=", value, "lip");
            return (Criteria) this;
        }

        public Criteria andLipLessThan(String value) {
            addCriterion("lip <", value, "lip");
            return (Criteria) this;
        }

        public Criteria andLipLessThanOrEqualTo(String value) {
            addCriterion("lip <=", value, "lip");
            return (Criteria) this;
        }

        public Criteria andLipLike(String value) {
            addCriterion("lip like", value, "lip");
            return (Criteria) this;
        }

        public Criteria andLipNotLike(String value) {
            addCriterion("lip not like", value, "lip");
            return (Criteria) this;
        }

        public Criteria andLipIn(List<String> values) {
            addCriterion("lip in", values, "lip");
            return (Criteria) this;
        }

        public Criteria andLipNotIn(List<String> values) {
            addCriterion("lip not in", values, "lip");
            return (Criteria) this;
        }

        public Criteria andLipBetween(String value1, String value2) {
            addCriterion("lip between", value1, value2, "lip");
            return (Criteria) this;
        }

        public Criteria andLipNotBetween(String value1, String value2) {
            addCriterion("lip not between", value1, value2, "lip");
            return (Criteria) this;
        }

        public Criteria andLportIsNull() {
            addCriterion("lport is null");
            return (Criteria) this;
        }

        public Criteria andLportIsNotNull() {
            addCriterion("lport is not null");
            return (Criteria) this;
        }

        public Criteria andLportEqualTo(Integer value) {
            addCriterion("lport =", value, "lport");
            return (Criteria) this;
        }

        public Criteria andLportNotEqualTo(Integer value) {
            addCriterion("lport <>", value, "lport");
            return (Criteria) this;
        }

        public Criteria andLportGreaterThan(Integer value) {
            addCriterion("lport >", value, "lport");
            return (Criteria) this;
        }

        public Criteria andLportGreaterThanOrEqualTo(Integer value) {
            addCriterion("lport >=", value, "lport");
            return (Criteria) this;
        }

        public Criteria andLportLessThan(Integer value) {
            addCriterion("lport <", value, "lport");
            return (Criteria) this;
        }

        public Criteria andLportLessThanOrEqualTo(Integer value) {
            addCriterion("lport <=", value, "lport");
            return (Criteria) this;
        }

        public Criteria andLportIn(List<Integer> values) {
            addCriterion("lport in", values, "lport");
            return (Criteria) this;
        }

        public Criteria andLportNotIn(List<Integer> values) {
            addCriterion("lport not in", values, "lport");
            return (Criteria) this;
        }

        public Criteria andLportBetween(Integer value1, Integer value2) {
            addCriterion("lport between", value1, value2, "lport");
            return (Criteria) this;
        }

        public Criteria andLportNotBetween(Integer value1, Integer value2) {
            addCriterion("lport not between", value1, value2, "lport");
            return (Criteria) this;
        }

        public Criteria andQnoIsNull() {
            addCriterion("qno is null");
            return (Criteria) this;
        }

        public Criteria andQnoIsNotNull() {
            addCriterion("qno is not null");
            return (Criteria) this;
        }

        public Criteria andQnoEqualTo(Long value) {
            addCriterion("qno =", value, "qno");
            return (Criteria) this;
        }

        public Criteria andQnoNotEqualTo(Long value) {
            addCriterion("qno <>", value, "qno");
            return (Criteria) this;
        }

        public Criteria andQnoGreaterThan(Long value) {
            addCriterion("qno >", value, "qno");
            return (Criteria) this;
        }

        public Criteria andQnoGreaterThanOrEqualTo(Long value) {
            addCriterion("qno >=", value, "qno");
            return (Criteria) this;
        }

        public Criteria andQnoLessThan(Long value) {
            addCriterion("qno <", value, "qno");
            return (Criteria) this;
        }

        public Criteria andQnoLessThanOrEqualTo(Long value) {
            addCriterion("qno <=", value, "qno");
            return (Criteria) this;
        }

        public Criteria andQnoIn(List<Long> values) {
            addCriterion("qno in", values, "qno");
            return (Criteria) this;
        }

        public Criteria andQnoNotIn(List<Long> values) {
            addCriterion("qno not in", values, "qno");
            return (Criteria) this;
        }

        public Criteria andQnoBetween(Long value1, Long value2) {
            addCriterion("qno between", value1, value2, "qno");
            return (Criteria) this;
        }

        public Criteria andQnoNotBetween(Long value1, Long value2) {
            addCriterion("qno not between", value1, value2, "qno");
            return (Criteria) this;
        }

        public Criteria andLoginTimeIsNull() {
            addCriterion("login_time is null");
            return (Criteria) this;
        }

        public Criteria andLoginTimeIsNotNull() {
            addCriterion("login_time is not null");
            return (Criteria) this;
        }

        public Criteria andLoginTimeEqualTo(Date value) {
            addCriterion("login_time =", value, "loginTime");
            return (Criteria) this;
        }

        public Criteria andLoginTimeNotEqualTo(Date value) {
            addCriterion("login_time <>", value, "loginTime");
            return (Criteria) this;
        }

        public Criteria andLoginTimeGreaterThan(Date value) {
            addCriterion("login_time >", value, "loginTime");
            return (Criteria) this;
        }

        public Criteria andLoginTimeGreaterThanOrEqualTo(Date value) {
            addCriterion("login_time >=", value, "loginTime");
            return (Criteria) this;
        }

        public Criteria andLoginTimeLessThan(Date value) {
            addCriterion("login_time <", value, "loginTime");
            return (Criteria) this;
        }

        public Criteria andLoginTimeLessThanOrEqualTo(Date value) {
            addCriterion("login_time <=", value, "loginTime");
            return (Criteria) this;
        }

        public Criteria andLoginTimeIn(List<Date> values) {
            addCriterion("login_time in", values, "loginTime");
            return (Criteria) this;
        }

        public Criteria andLoginTimeNotIn(List<Date> values) {
            addCriterion("login_time not in", values, "loginTime");
            return (Criteria) this;
        }

        public Criteria andLoginTimeBetween(Date value1, Date value2) {
            addCriterion("login_time between", value1, value2, "loginTime");
            return (Criteria) this;
        }

        public Criteria andLoginTimeNotBetween(Date value1, Date value2) {
            addCriterion("login_time not between", value1, value2, "loginTime");
            return (Criteria) this;
        }

        public Criteria andAttachIsNull() {
            addCriterion("attach is null");
            return (Criteria) this;
        }

        public Criteria andAttachIsNotNull() {
            addCriterion("attach is not null");
            return (Criteria) this;
        }

        public Criteria andAttachEqualTo(String value) {
            addCriterion("attach =", value, "attach");
            return (Criteria) this;
        }

        public Criteria andAttachNotEqualTo(String value) {
            addCriterion("attach <>", value, "attach");
            return (Criteria) this;
        }

        public Criteria andAttachGreaterThan(String value) {
            addCriterion("attach >", value, "attach");
            return (Criteria) this;
        }

        public Criteria andAttachGreaterThanOrEqualTo(String value) {
            addCriterion("attach >=", value, "attach");
            return (Criteria) this;
        }

        public Criteria andAttachLessThan(String value) {
            addCriterion("attach <", value, "attach");
            return (Criteria) this;
        }

        public Criteria andAttachLessThanOrEqualTo(String value) {
            addCriterion("attach <=", value, "attach");
            return (Criteria) this;
        }

        public Criteria andAttachLike(String value) {
            addCriterion("attach like", value, "attach");
            return (Criteria) this;
        }

        public Criteria andAttachNotLike(String value) {
            addCriterion("attach not like", value, "attach");
            return (Criteria) this;
        }

        public Criteria andAttachIn(List<String> values) {
            addCriterion("attach in", values, "attach");
            return (Criteria) this;
        }

        public Criteria andAttachNotIn(List<String> values) {
            addCriterion("attach not in", values, "attach");
            return (Criteria) this;
        }

        public Criteria andAttachBetween(String value1, String value2) {
            addCriterion("attach between", value1, value2, "attach");
            return (Criteria) this;
        }

        public Criteria andAttachNotBetween(String value1, String value2) {
            addCriterion("attach not between", value1, value2, "attach");
            return (Criteria) this;
        }
    }

    /**
     * This class was generated by MyBatis Generator.
     * This class corresponds to the database table login_info
     *
     * @mbg.generated do_not_delete_during_merge
     */
    public static class Criteria extends GeneratedCriteria {

        protected Criteria() {
            super();
        }
    }

    /**
     * This class was generated by MyBatis Generator.
     * This class corresponds to the database table login_info
     *
     * @mbg.generated
     */
    public static class Criterion {
        private String condition;

        private Object value;

        private Object secondValue;

        private boolean noValue;

        private boolean singleValue;

        private boolean betweenValue;

        private boolean listValue;

        private String typeHandler;

        public String getCondition() {
            return condition;
        }

        public Object getValue() {
            return value;
        }

        public Object getSecondValue() {
            return secondValue;
        }

        public boolean isNoValue() {
            return noValue;
        }

        public boolean isSingleValue() {
            return singleValue;
        }

        public boolean isBetweenValue() {
            return betweenValue;
        }

        public boolean isListValue() {
            return listValue;
        }

        public String getTypeHandler() {
            return typeHandler;
        }

        protected Criterion(String condition) {
            super();
            this.condition = condition;
            this.typeHandler = null;
            this.noValue = true;
        }

        protected Criterion(String condition, Object value, String typeHandler) {
            super();
            this.condition = condition;
            this.value = value;
            this.typeHandler = typeHandler;
            if (value instanceof List<?>) {
                this.listValue = true;
            } else {
                this.singleValue = true;
            }
        }

        protected Criterion(String condition, Object value) {
            this(condition, value, null);
        }

        protected Criterion(String condition, Object value, Object secondValue, String typeHandler) {
            super();
            this.condition = condition;
            this.value = value;
            this.secondValue = secondValue;
            this.typeHandler = typeHandler;
            this.betweenValue = true;
        }

        protected Criterion(String condition, Object value, Object secondValue) {
            this(condition, value, secondValue, null);
        }
    }
}